input_layer = Input(shape=(88739, 1)) 

    conv1 = Conv1D(filters=4, kernel_size=(7), strides=1, padding='causal', activation='relu')(input_layer)
    
    pool1 = MaxPooling1D(pool_size=3, strides=2)(conv1)
    
    conv2 = Conv1D(filters=5, kernel_size=(5), strides=1, padding='causal', activation='relu')(pool1)
    
    conv3 = Conv1D(filters=16, kernel_size=(3), strides=1, padding='causal', activation='relu')(conv2)
    
    conv4 = Conv1D(filters=32, kernel_size=(3), strides=1, padding='causal', activation='relu')(conv3)
    
    pool2 = GlobalMaxPooling1D()(conv4)
    
    fc1 = Dense(128, activation='relu')(pool2)
    dropout1 = Dropout(0.2)(fc1)
    
    fc2 = Dense(128, activation='relu')(dropout1)
    
    output_layer = Dense(1, activation='linear')(fc2)
    
    model = Model(inputs=input_layer, outputs=output_layer)
    early_stopping = keras.callbacks.EarlyStopping(monitor='val_mae', patience=200, restore_best_weights=True)

    model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.000025), 
                  loss='mean_absolute_error', 
                  metrics=['mae']
                  )
    
    model.summary()
    history = model.fit(X_train_reshaped, trainy, epochs=1000,
                        	validation_data=(X_valid_reshaped, validy),
                        	batch_size = 2,
                            callbacks = [early_stopping]))
